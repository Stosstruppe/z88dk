C:/Users/lance/AppData/Local/Temp/zcc00001EECB9B74.asm:
     1                          MODULE pc88_crt0_asm
     2                          LINE 0, "C:\etc\z88dk\lib\config\..\..\\lib\target\pc88\classic\pc88_crt0.asm"
C:\etc\z88dk\lib\config\..\..\\lib\target\pc88\classic\pc88_crt0.asm:
                                
     1                          ;       NEC PC-8801 stub
     2                          ;
     3                          ;       Stefano Bodrato - 2018
     4                          ;
     5                          ;	$Id: pc88_crt0.asm $
     6                          ;
     7                          
     8                              MODULE  pc88_crt0
     9                          
    10                          
    11                              defc    crt0 = 1
    12                              INCLUDE "zcc_opt.def"
C:/Users/lance/AppData/Local/Temp/zcc00001EECB9B73/zcc_opt.def:
     1                          
     2                          IF !DEFINED_startup
     3                          	defc	DEFINED_startup = 1
     4                          	defc startup = 1
     5                          	IFNDEF startup
     6                          	ENDIF
     7                          ENDIF
     8                          
     9                          
C:\etc\z88dk\lib\config\..\..\\lib\target\pc88\classic\pc88_crt0.asm:
    13                          
    14                              EXTERN  _main
    15                          
    16                              PUBLIC  l_dcal
    17                              PUBLIC  __Exit
    18                          
    19                              PUBLIC	__CLIB_PC8800_HAS_BASIC
    20                              PUBLIC	pc88bios
    21                          
    22                              PUBLIC  __CLIB_PC8800_V2_ENABLED
    23                          
    24                          IF DEFINED_CLIB_PC8800_V2_ENABLED
    25                              defc    __CLIB_PC8800_V2_ENABLED = CLIB_PC8800_V2_ENABLED
    26                          ELSE
    27                              defc    __CLIB_PC8800_V2_ENABLED = 1
    28                          ENDIF
    29                          
    30                              defc    __CPU_CLOCK = 4000000
    31                          
    32                          IF (!DEFINED_startup || (startup=1))
    33                              defc    __CLIB_PC8800_HAS_BASIC = 1
    34                              INCLUDE "target/pc88/classic/monitor.asm"
C:/etc/z88dk/lib/config/../../lib/target/pc88/classic/monitor.asm:
     1                          ;       NEC PC-8801 stub for monitor mode
     2                          ;
     3                          ;       Stefano Bodrato - 2018
     4                          
     5                              IFNDEF CRT_ORG_CODE
     6                                  defc CRT_ORG_CODE  = $8A00
     7                              ENDIF
     8                          
     9                              defc    CONSOLE_COLUMNS = 80
    10                              defc    CONSOLE_ROWS = 20
    11                              defc    TAR__clib_exit_stack_size = 32
    12                              defc    TAR__register_sp = 0xc000
    13                              INCLUDE "crt/classic/crt_rules.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_rules.inc:
     1                          
     2                          ; Rules for setting up defaults for configuring the build
     3                          
     4                             INCLUDE "crt/classic/crt_defaults.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_defaults.inc:
     1                          ;
     2                          ; Default value
     3                          
     4                          
     5                             defc DEF__register_sp               = 0       ;; initial value of sp (-1 = do not modify (some targets may redefine meaning), 0 = top of memory)
     6                          
     7                             defc DEF__crt_enable_restart        = 0       ;; if non-zero, restart the program on exit (correct initialization of static variables with rom models only)
     8                             defc DEF__crt_on_exit               = 0x10001 ;; halt on exit (see documentation for other exit behaviours)
     9                             defc DEF__crt_enable_eidi           = 0       ;; bit flags: 0x01 = di on start, 0x02 = ei on start, 0x10 = di on exit, 0x20 = ei on exit
    10                             defc DEF__crt_interrupt_mode        = -1      ;; if 0-2 crt inserts appropriate im x instruction
    11                             defc DEF__crt_interrupt_mode_exit   = -1      ;; if 0-2 crt inserts appropriate im x instruction on exit
    12                             defc DEF__crt_enable_rst            = 0       ;; if non-zero and in some crts with code org = 0, set bits indicate which rst locations are implemented with user code
    13                             defc DEF__crt_enable_nmi            = 0       ;; if non-zero and in some crts with code org = 0, a jump to user code to service the nmi is inserted
    14                          
    15                             defc DEF__crt_stack_size            = -1      ;; Overhead for stack if heap required
    16                             defc DEF__clib_malloc_heap_size     = -1      ;; Default heap size (bytes)
    17                          
    18                          
    19                             ; clib defaults
    20                             defc DEF__clib_exit_stack_size      = 32      ;; max number of functions that can be registered with atexit()
    21                          
    22                             defc DEF__clib_banking_stack_size   = 100	 ;; For each bank call we save 2 words on the temporary stack
    23                          
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_rules.inc:
     5                          
     6                             IFNDEF CRT_INITIALIZE_BSS
     7                                defc CRT_INITIALIZE_BSS = 1
     8                             ENDIF
     9                          
    10                             IFDEF REGISTER_SP
    11                                defc __register_sp = REGISTER_SP
    12                             ELSE
    13                                IFDEF STACKPTR
    14                                   defc __register_sp = STACKPTR
    15                                ELSE
    16                                   IFDEF TAR__register_sp
    17                                      defc __register_sp = TAR__register_sp
    18                                   ELSE
    19                                      defc __register_sp = DEF__register_sp
    20                                   ENDIF
    21                                ENDIF
    22                             ENDIF
    23                          
    24                             IFNDEF TAR__crt_enable_rst
    25                                 defc TAR__crt_enable_rst = DEF__crt_enable_rst
    26                             ENDIF
    27                          
    28                             IFDEF CRT_ENABLE_RST
    29                                defc __crt_enable_rst = CRT_ENABLE_RST | TAR__crt_enable_rst
    30                             ELSE
    31                                defc __crt_enable_rst = TAR__crt_enable_rst
    32                             ENDIF
    33                          
    34                             IFDEF CRT_ENABLE_NMI
    35                                defc __crt_enable_nmi = CRT_ENABLE_NMI
    36                             ELSE
    37                               IFNDEF TAR__crt_enable_nmi
    38                                  defc TAR__crt_enable_nmi = 0
    39                               ENDIF
    40                               defc __crt_enable_nmi = TAR__crt_enable_nmi
    41                             ENDIF
    42                          
    43                             IFDEF CRT_ENABLE_RESTART
    44                                defc __crt_enable_restart = CRT_ENABLE_RESTART
    45                             ELSE
    46                                IFDEF TAR__crt_enable_restart
    47                                   defc __crt_enable_restart = TAR__crt_enable_restart
    48                                ELSE
    49                                   defc __crt_enable_restart = DEF__crt_enable_restart
    50                                ENDIF
    51                             ENDIF
    52                          
    53                            IF __crt_enable_restart
    54                                defc __crt_on_exit = 0x10008
    55                             ELSE
    56                                IFDEF CRT_ON_EXIT
    57                                   defc __crt_on_exit = CRT_ON_EXIT
    58                                ELSE
    59                                   IFDEF TAR__crt_on_exit
    60                                      defc __crt_on_exit = TAR__crt_on_exit
    61                                   ELSE
    62                                      defc __crt_on_exit = DEF__crt_on_exit
    63                                   ENDIF
    64                                ENDIF
    65                            ENDIF
    66                          
    67                          
    68                             IFDEF CRT_ENABLE_EIDI
    69                                defc __crt_enable_eidi = CRT_ENABLE_EIDI
    70                             ELSE
    71                                IFDEF TAR__crt_enable_eidi
    72                                   defc __crt_enable_eidi = TAR__crt_enable_eidi
    73                                ELSE
    74                                   defc __crt_enable_eidi = DEF__crt_enable_eidi
    75                                ENDIF
    76                             ENDIF
    77                          
    78                             IFDEF CRT_INTERRUPT_MODE
    79                                defc __crt_interrupt_mode = CRT_INTERRUPT_MODE
    80                             ELSE
    81                                IFDEF TAR__crt_interrupt_mode
    82                                   defc __crt_interrupt_mode = TAR__crt_interrupt_mode
    83                                ELSE
    84                                   defc __crt_interrupt_mode = DEF__crt_interrupt_mode
    85                                ENDIF
    86                             ENDIF
    87                          
    88                             IFDEF CRT_INTERRUPT_MODE_EXIT
    89                                defc __crt_interrupt_mode_exit = CRT_INTERRUPT_MODE_EXIT
    90                             ELSE
    91                                IFDEF TAR__crt_interrupt_mode_exit
    92                                   defc __crt_interrupt_mode_exit = TAR__crt_interrupt_mode_exit
    93                                ELSE
    94                                   defc __crt_interrupt_mode_exit = DEF__crt_interrupt_mode_exit
    95                                ENDIF
    96                             ENDIF
    97                          
    98                          
    99                          
   100                          
   101                             ; By default we want to have stdio working for us
   102                             IFNDEF CRT_ENABLE_STDIO
   103                                 defc CRT_ENABLE_STDIO = 1
   104                             ENDIF
   105                          
   106                             IFDEF CLIB_EXIT_STACK_SIZE
   107                                defc __clib_exit_stack_size = CLIB_EXIT_STACK_SIZE
   108                             ELSE
   109                                IFDEF TAR__clib_exit_stack_size
   110                                   defc __clib_exit_stack_size = TAR__clib_exit_stack_size
   111                                ELSE
   112                                   defc __clib_exit_stack_size = DEF__clib_exit_stack_size
   113                                ENDIF
   114                             ENDIF
   115                          
   116                             ; For each bank call we save 2 words on the temporary stack
   117                             ; this controls the depth of calls we can make safely
   118                             IFNDEF CLIB_BANKING_STACK_SIZE
   119                                PUBLIC CLIB_BANKING_STACK_SIZE
   120                                IFDEF TAR__clib_banking_stack_size
   121                                   defc CLIB_BANKING_STACK_SIZE = TAR__clib_banking_stack_size
   122                                ELSE
   123                                   defc CLIB_BANKING_STACK_SIZE = DEF__clib_banking_stack_size
   124                                ENDIF
   125                             ENDIF
   126                          
   127                             ;; Some heapsize definitions
   128                             IFDEF CRT_STACK_SIZE
   129                                defc __crt_stack_size = CRT_STACK_SIZE
   130                             ELSE
   131                                IFDEF TAR__crt_stack_size
   132                                   defc __crt_stack_size = TAR__crt_stack_size
   133                                ELSE
   134                                   defc __crt_stack_size = DEF__crt_stack_size
   135                                ENDIF
   136                             ENDIF
   137                          
   138                             IFDEF CLIB_MALLOC_HEAP_SIZE
   139                                defc __clib_malloc_heap_size = CLIB_MALLOC_HEAP_SIZE
   140                             ELSE
   141                                IFDEF TAR__clib_malloc_heap_size
   142                                   defc __clib_malloc_heap_size = TAR__clib_malloc_heap_size
   143                                ELSE
   144                                   defc __clib_malloc_heap_size = DEF__clib_malloc_heap_size
   145                                ENDIF
   146                             ENDIF
   147                          
   148                          
   149                             PUBLIC __CRT_KEY_DEL
   150                             IFDEF CRT_KEY_DEL
   151                               defc __CRT_KEY_DEL = CRT_KEY_DEL
   152                             ELSE
   153                               defc __CRT_KEY_DEL = 8
   154                             ENDIF
   155                          
   156                             PUBLIC __CRT_KEY_CAPS_LOCK
   157                             IFDEF CRT_KEY_CAPS_LOCK
   158                               defc __CRT_KEY_CAPS_LOCK  = CRT_KEY_CAPS_LOCK
   159                             ELSE
   160                               defc __CRT_KEY_CAPS_LOCK = 6
   161                             ENDIF
   162                          
   163                             PUBLIC __CPU_CLOCK
   164                             IFNDEF __CPU_CLOCK
   165                               defc __CPU_CLOCK = 3500000
   166                             ENDIF
   167                          
   168                             PUBLIC __CLIB_CONIO_NATIVE_COLOUR
   169                             IFDEF CLIB_CONIO_NATIVE_COLOUR
   170                               defc __CLIB_CONIO_NATIVE_COLOUR = CLIB_CONIO_NATIVE_COLOUR
   171                             ELSE
   172                               defc __CLIB_CONIO_NATIVE_COLOUR = 0
   173                             ENDIF
   174                          
   175                             ; When using the firmware printer we may need to disable the soft
   176                             ; cursor created by fgets_cons()
   177                             PUBLIC __CLIB_DISABLE_FGETS_CURSOR
   178                             IFDEF CLIB_DISABLE_FGETS_CURSOR
   179                               defc __CLIB_DISABLE_FGETS_CURSOR = CLIB_DISABLE_FGETS_CURSOR
   180                             ELSE
   181                               defc __CLIB_DISABLE_FGETS_CURSOR = 0
   182                             ENDIF
   183                          
   184                             ; Delay when entering fgetc_cons()
   185                             ; 50ms stops rogue repeats nicely, but may need tuning
   186                             PUBLIC __CLIB_FGETC_CONS_DELAY
   187                             IFDEF CLIB_FGETC_CONS_DELAY
   188                               defc __CLIB_FGETC_CONS_DELAY = CLIB_FGETC_CONS_DELAY
   189                             ELSE
   190                               defc __CLIB_FGETC_CONS_DELAY = 50
   191                             ENDIF
   192                          
   193                             ; Delay when kbhit/getch() returns a cached key press
   194                             ; Delaying slightly means that typing is possible
   195                             PUBLIC __CLIB_KBHIT_DELAY
   196                             IFDEF CLIB_KBHIT_DELAY
   197                               defc __CLIB_KBHIT_DELAY = CLIB_KBHIT_DELAY
   198                             ELSE
   199                               defc __CLIB_KBHIT_DELAY = 0
   200                             ENDIF
   201                          
   202                             ; Some ports (looking at you tiki100) need to have graphics routines stored out
   203                             ; of paging harm. Normally we'd just use code_driver and keep the routines close
   204                             ; the start of the address space. However for tiki100, we need them at the end,
   205                             ; (in this case > 32768)
   206                             IF DEFINED_CRT_ORG_GRAPHICS
   207                                 defc __crt_org_graphics = CRT_ORG_GRAPHICS
   208                             ENDIF
   209                          
   210                             ; Allow far data access code to placed at a different point in memory
   211                             IF DEFINED_CRT_ORG_FAR
   212                                 defc __crt_org_far = CRT_ORG_FAR
   213                             ENDIF
   214                          
   215                             ; If 32 bit floats are defined, then we need to indicate to the library
   216                             ; that they are in use (mainly for printf/scanf)
   217                             PUBLIC CLIB_32BIT_FLOATS
   218                             IF !DEFINED_CLIB_32BIT_FLOATS
   219                                 defc CLIB_32BIT_FLOATS = 0
   220                             ENDIF
   221                             PUBLIC CLIB_64BIT_FLOATS
   222                             IF !DEFINED_CLIB_64BIT_FLOATS
   223                                 defc CLIB_64BIT_FLOATS = 0
   224                             ENDIF
   225                          
   226                             ; Some targets startup in different screen modes depending on the environment:
   227                             ; eg native = 40columns, CP/M = 80 columns. These should be explicitly defined
   228                             ; if needed. So default to an unused value if not
   229                             PUBLIC CLIB_DEFAULT_SCREEN_MODE
   230                             IFNDEF CLIB_DEFAULT_SCREEN_MODE
   231                                 defc CLIB_DEFAULT_SCREEN_MODE = -1
   232                             ENDIF
   233                          
   234                             PUBLIC CLIB_EXIT_SCREEN_MODE
   235                             IFNDEF CLIB_EXIT_SCREEN_MODE
   236                                 defc CLIB_EXIT_SCREEN_MODE = -1
   237                             ENDIF
   238                          
   239                          
   240                              ; Maximum number of FILEs available
   241                              IF !DEFINED_CLIB_FOPEN_MAX
   242                                  DEFC    CLIB_FOPEN_MAX = 10
   243                              ENDIF
   244                              PUBLIC  __FOPEN_MAX
   245                              defc    __FOPEN_MAX = CLIB_FOPEN_MAX
   246                          
   247                              ; Maximum number of fds available
   248                              IF !DEFINED_CLIB_OPEN_MAX
   249                                  ; Map this old nofileio pragma into a modern form
   250                                  IF DEFINED_nofileio
   251                                      defc    CLIB_OPEN_MAX = 0
   252                                  ELSE
   253                                      defc    CLIB_OPEN_MAX = CLIB_FOPEN_MAX
   254                                  ENDIF
   255                              ENDIF
   256                              PUBLIC  __CLIB_OPEN_MAX
   257                              defc    __CLIB_OPEN_MAX = CLIB_OPEN_MAX
   258                          
   259                             ; By default allow the command line options if available on the target/subtype
   260                             IF !DEFINED_CRT_ENABLE_COMMANDLINE
   261                                IFDEF TAR__CRT_ENABLE_COMMANDLINE
   262                                    defc CRT_ENABLE_COMMANDLINE = TAR__CRT_ENABLE_COMMANDLINE
   263                                ELSE
   264                                    defc CRT_ENABLE_COMMANDLINE = 1
   265                                ENDIF
   266                             ENDIF
   267                          
   268                          
   269                             ; Map this old pragma into a "modern" name
   270                             IF DEFINED_nostreams
   271                                 defc CRT_COMMANDLINE_REDIRECTION = 0
   272                             ELIF !DEFINED_CRT_COMMANDLINE_REDIRECTION
   273                                 ; File redirection on command line arguments can only happen
   274                                 ; if stdio is enabled
   275                                 IF CRT_ENABLE_STDIO = 1
   276                                     defc CRT_COMMANDLINE_REDIRECTION = 1
   277                                 ELSE
   278                                     defc CRT_COMMANDLINE_REDIRECTION = 0
   279                                 ENDIF
   280                             ENDIF
   281                          
   282                             ; Block size for the gendos library
   283                             IF !DEFINED_CLIB_RND_BLOCKSIZE
   284                                DEFC    CLIB_RND_BLOCKSIZE = 1000
   285                             ENDIF
   286                             PUBLIC  __RND_BLOCKSIZE
   287                             defc    __RND_BLOCKSIZE = CLIB_RND_BLOCKSIZE
   288                          
   289                             ; Define the height of the font
   290                             IF !DEFINED_CLIB_FONT_HEIGHT
   291                                defc CLIB_FONT_HEIGHT = 8
   292                             ENDIF
   293                             PUBLIC __CLIB_FONT_HEIGHT
   294                             defc __CLIB_FONT_HEIGHT = CLIB_FONT_HEIGHT
   295                          
   296                             ; Firmware click setting (MSX/SVI)
   297                             IF !DEFINED_CLIB_FIRMWARE_KEYBOARD_CLICK
   298                                defc CLIB_FIRMWARE_KEYBOARD_CLICK = -1
   299                             ENDIF
   300                             PUBLIC __CLIB_FIRMWARE_KEYBOARD_CLICK
   301                             defc __CLIB_FIRMWARE_KEYBOARD_CLICK = CLIB_FIRMWARE_KEYBOARD_CLICK
   302                          
   303                             IF CLIB_FARHEAP_BANKS
   304                                PUBLIC CLIB_FARHEAP_BANKS
   305                             ENDIF
   306                          
   307                             ; Custom memory map
   308                             IF DEFINED_MMAP
   309                                 defc __MMAP = MMAP
   310                             ELSE
   311                                 defc __MMAP = 0
   312                             ENDIF
   313                          
C:/etc/z88dk/lib/config/../../lib/target/pc88/classic/monitor.asm:
    14                          
    15                              org CRT_ORG_CODE
    16                          
    17                          ;----------------------
    18                          ; Execution starts here
    19                          ;----------------------
    20                          start:
    21  0000  3e00                  ld      a,$FF				; back to main ROM
    22  0002  d300                  out     ($71),a				; bank switching
    23                          
    24  0004  ed730000              ld      (__restore_sp_onexit+1),sp
    25                              INCLUDE	"crt/classic/crt_init_sp.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_init_sp.inc:
     1                          IF __register_sp < -1
     2                          
     3                             IF __CPU_INTEL__
     4                               ld hl,(-__register_sp)      ; stack location is stored at memory address
     5                               ld sp,hl
     6                             ELSE
     7                               ld sp,(-__register_sp)      ; stack location is stored at memory address
     8                             ENDIF
     9                          
    10                          ELSE
    11                          
    12                             IF __register_sp != -1
    13                          
    14  0008  310000                  ld sp,__register_sp      ; stack is at fixed address
    15                          
    16                             ENDIF
    17                          
    18                          ENDIF
    19                          
    20                          
C:/etc/z88dk/lib/config/../../lib/target/pc88/classic/monitor.asm:
    26  000b  cd0000                call	crt0_init
    27                          
    28                              INCLUDE	"crt/classic/crt_init_atexit.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_init_atexit.inc:
     1                          
     2                              PUBLIC  __clib_exit_stack_size
     3                              EXTERN  __exit_atexit_funcs
     4                          
     5                          IF __clib_exit_stack_size > 0
     6  000e  210000                ld      hl, -(__clib_exit_stack_size * 2)
     7  0011  39                    add     hl,sp
     8  0012  f9                    ld      sp,hl
     9                            IF __CPU_GBZ80__
    10                              ld      hl,sp+0
    11                              ld      d,h
    12                              ld      e,l
    13                              ld      hl,__exit_atexit_funcs
    14                              ld      a,l
    15                              ld      (hl+),a
    16                              ld      a,h
    17                              ld      (hl+),a
    18                            ELIF __CPU_INTEL__
    19                              ld      hl,0
    20                              add     hl,sp
    21                              ld      (__exit_atexit_funcs),hl
    22                            ELSE
    23  0013  ed730000              ld      (__exit_atexit_funcs),sp
    24                            ENDIF
    25                          ENDIF
    26                          
    27                          
    28                          
C:/etc/z88dk/lib/config/../../lib/target/pc88/classic/monitor.asm:
    29                          
    30                              INCLUDE "crt/classic/crt_init_heap.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_init_heap.inc:
     1                          
     2                          ; Heap setup. We have a few ways to setup the heap
     3                          ;
     4                          ; 1. -pragma-define:CLIB_MALLOC_HEAP_SIZE - creates a heap in BSS
     5                          ; 2. -pragma-define:CRT_STACK_SIZE - leaves x for stack, rest is heap
     6                          ; 3. -DAMALLOC etc - divides up the space. Last address either programmatic or defined by
     7                          ; CRT_MAX_HEAP_ADDRESS
     8                          ; 4. Some ports call in with fixed addresses to use
     9                          ;
    10                          ; For 2 and 3, heap runs from either _BSS_TAIL or CRT_HEAP_ADDRESS
    11                          ;
    12                          ; Note: This code must be called after crt0_init for two reasons:
    13                          ; 1. The heap pointer is within bss (so would get wiped)
    14                          ; 2. Some targets have a himem blob sitting after bss on load
    15                          
    16                          
    17                          MACRO MALLSUB_HLDE
    18                            IF __CPU_INTEL__ || __CPU_GBZ80__
    19                              ld      a,l
    20                              sub     e
    21                              ld      l,a
    22                              ld      a,h
    23                              sbc     d
    24                              ld      h,a
    25                            ELSE
    26                              sbc     hl,de
    27                            ENDIF
    28                          ENDM
    29                          
    30                          
    31                          IF __clib_malloc_heap_size > 0
    32                              ;; The heap is in BSS section already, just need to register it
    33                              ld      bc,__autoheap
    34                              ld      hl,__clib_malloc_heap_size
    35                              push    bc      ; main address for malloc area
    36                              push    hl      ; area size
    37                              EXTERN  sbrk_callee
    38                              call    sbrk_callee
    39                          ELIF __crt_stack_size > 0
    40                              ;; Support the newlib model where we set how much stack we want and then the rest is heap
    41                              ld      hl,sp
    42                              ld      de,__crt_stack_size
    43                              and     a
    44                              MALLSUB_HLDE
    45                            IFDEF CRT_HEAP_ADDRESS
    46                              ld      de,CRT_HEAP_ADDRESS
    47                            ELSE
    48                              ld      de,__BSS_END_tail
    49                            ENDIF
    50                              and     a
    51                              MALLSUB_HLDE
    52                              push    de      ; main address for malloc area
    53                              push    hl      ; area size
    54                              EXTERN  sbrk_callee
    55                              call    sbrk_callee
    56                          ELIF DEFINED_CRT_HEAP_AMALLOC
    57                            ;; -DAMALLOC handling
    58                            IF CRT_MAX_HEAP_ADDRESS
    59                              ld      hl,CRT_MAX_HEAP_ADDRESS
    60                              defc __crt_skip_heapsize_calcs = 1
    61                            ELIFNDEF CRT_MAX_HEAP_ADDRESS_hl
    62                              ld      hl,sp
    63                            ELSE
    64                              ;hl holds top address
    65                              defc __crt_skip_heapsize_calcs = 1
    66                            ENDIF
    67                              ; HL must hold SP or the end of free memory
    68                            IFDEF CRT_HEAP_ADDRESS
    69                              ld      bc,CRT_HEAP_ADDRESS
    70                            ELSE
    71                              ld      bc,__BSS_END_tail
    72                            ENDIF
    73                          
    74                          ; hl = sp/end of heap
    75                          ; bc = start of heap
    76                          
    77                            IF __CPU_8085__
    78                              sub     hl,bc   ; hl = total free memory
    79                            ELIF __CPU_8080__ || __CPU_GBZ80
    80                              ld      a,l
    81                              sub     c
    82                              ld      l,a
    83                              ld      a,h
    84                              sbc     b
    85                              ld      h,a
    86                            ELSE
    87                              sbc     hl,bc   ; hl = total free memory
    88                            ENDIF
    89                          
    90                          
    91                            IFNDEF __crt_skip_heapsize_calcs
    92                              ld      de,hl
    93                          ; AMALLOC initialisation
    94                          ; First of all find a 25% of the free memory
    95                             IF __CPU_8085__
    96                              sra     hl
    97                              sra     hl
    98                              ld      a,$3F
    99                              and     h
   100                              ld      h,a
   101                              ex      de,hl
   102                             ELIF __CPU_8080__ || __CPU_GBZ80
   103                              and     a
   104                              ld      a,d
   105                              rra
   106                              ld      d,a
   107                              ld      a,e
   108                              rra
   109                              ld      e,a
   110                              and     a
   111                              ld      a,d
   112                              rra
   113                              ld      d,a
   114                              ld      a,e
   115                              rra
   116                              ld      e,a
   117                             ELSE
   118                              srl     d
   119                              rr      e
   120                              srl     d
   121                              rr      e
   122                             ENDIF
   123                          
   124                          
   125                             ; Reduce to heap size to 75% of available memory
   126                             MALLSUB_HLDE
   127                             ; Reduce to 50% if needed
   128                             IF CRT_HEAP_AMALLOC & 2
   129                             MALLSUB_HLDE
   130                             ENDIF
   131                            ; Reduce to 25% if needed
   132                             IF CRT_HEAP_AMALLOC & 4
   133                             MALLSUB_HLDE
   134                             ENDIF
   135                            ENDIF
   136                          
   137                              push    bc      ; main address for malloc area
   138                              push    hl      ; area size
   139                              EXTERN  sbrk_callee
   140                              call    sbrk_callee
   141                          
   142                          ENDIF
   143                          
C:/etc/z88dk/lib/config/../../lib/target/pc88/classic/monitor.asm:
    31                              INCLUDE "crt/classic/crt_init_eidi.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_init_eidi.inc:
     1                          ; ei/di state at the start of the program
     2                          
     3                          IF !__CPU_RABBIT__
     4                             IF (__crt_enable_eidi & 0x01)
     5                                di
     6                             ENDIF
     7                             IF (__crt_enable_eidi & 0x02)
     8                                ei
     9                             ENDIF
    10                          ENDIF
    11                          
    12                          
C:/etc/z88dk/lib/config/../../lib/target/pc88/classic/monitor.asm:
    32                          
    33                          ;	ld	a,(defltdsk)
    34                          ;	ld	($EC85),a
    35                          ;** If NOT IDOS mode, just get rid of BASIC screen behaviour **
    36  0017  cd0000                call    $4021	; Hide function key strings
    37  001a  cd0000                call    _main
    38                          
    39                          __Exit:
    40  001d  cd0000                call    crt0_exit
    41                              INCLUDE "crt/classic/crt_exit_eidi.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_exit_eidi.inc:
     1                          ; ei/di state at the end of the program
     2                          
     3                             IF (__crt_enable_eidi & 0x10)
     4                                di
     5                             ENDIF
     6                          
     7                          IF !__CPU_INTEL__ && !__CPU_GBZ80__ && !__CPU_RABBIT__
     8                             IF (__crt_interrupt_mode_exit >= 0) && (__crt_interrupt_mode_exit <= 2)
     9                                   im __crt_interrupt_mode_exit
    10                             ENDIF
    11                          ENDIF
    12                          
    13                             IF (__crt_enable_eidi & 0x20)
    14                                ei
    15                             ENDIF
    16                          
    17                          
C:/etc/z88dk/lib/config/../../lib/target/pc88/classic/monitor.asm:
    42                          
    43                          __restore_sp_onexit:
    44  0020  310000                ld      sp,0
    45                          
    46  0023  3e00                  ld      a,$FF		; restore Main ROM
    47  0025  d300                  out     ($71),a
    48  0027  c9                    ret
    49                          
    50                          l_dcal:
    51  0028  e9                    jp      (hl)
    52                          
    53                          ; ROM interposer. This could be, sooner or later, moved to a convenient position in RAM
    54                          ; (e.g.  just before $C000) to be able to bounce between different RAM/ROM pages
    55                          pc88bios:
    56  0029  f5                    push    af
    57  002a  3e00                  ld      a,$FF		; MAIN ROM
    58  002c  d300                  out     ($71),a
    59  002e  f1                    pop     af
    60  002f  dde9                  jp      (ix)
    61                          
    62                          
    63                              INCLUDE "crt/classic/crt_runtime_selection.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_runtime_selection.inc:
     1                          ;
     2                          ; Allow selection of the library functions at linktime
     3                          ;
     4                          ; Included by crt0 files
     5                          ;
     6                          
     7                          
     8                          ; scanf format picker
     9                          
    10                          ; Compatibility with the new library format picker. The classic library
    11                          ; implements several of these together so there's an element of grouping.
    12                          ;
    13                          ; Default is to enable all converters except for float.
    14                          ;
    15                          ; Use -pragma-define:CLIB_OPT_SCANF=0x..... to control formatters
    16                          ;
    17                          ; bit 0 =  $    01 = enable %d
    18                          ; bit 1 =  $    02 = enable %u
    19                          ; bit 2 =  $    04 = enable %x
    20                          ; bit 3 =  $    08 = enable %X (duplicate)
    21                          ; bit 4 =  $    10 = enable %o
    22                          ; bit 5 =  $    20 = enable %n
    23                          ; bit 6 =  $    40 = enable %i
    24                          ; bit 7 =  $    80 = enable %p
    25                          ; bit 8 =  $   100 = enable %B
    26                          ; bit 9 =  $   200 = enable %s
    27                          ; bit 9 = $0200200 = enable %S (far string printf)
    28                          ; bit 10 = $   400 = enable %c
    29                          ; * bit 11 = $   800 = enable %I
    30                          ; bit 12 = $  1000 = enable %ld
    31                          ; bit 13 = $  2000 = enable %lu
    32                          ; bit 14 = $  4000 = enable %lx
    33                          ; bit 15 = $  8000 = enable %lX (duplicate)
    34                          ; bit 16 = $ 10000 = enable %lo
    35                          ; bit 17 = $ 20000 = enable %ln
    36                          ; bit 18 = $ 40000 = enable %li
    37                          ; bit 19 = $ 80000 = enable %lp
    38                          ; bit 20 = $100000 = enable %lB
    39                          ; bit 21 = $200000 = enable %[
    40                          ; * bit 22 = $  400000 = enable %a
    41                          ; * bit 23 = $  800000 = enable %A
    42                          ; bit 24 = $ 1000000 = enable %e
    43                          ; bit 25 = $ 2000000 = enable %E
    44                          ; bit 26 = $ 4000000 = enable %f
    45                          ; bit 27 = $ 8000000 = enable %F
    46                          ; bit 28 = $10000000 = enable %g
    47                          ; bit 29 = $20000000 = enable %G
    48                          ; bit 30 = $40000000 = enable flags handling
    49                          
    50                          IF DEFINED_CLIB_OPT_SCANF
    51                          	; User has specified the configuration level - force scanf to be included
    52                          	UNDEFINE NEED_scanf
    53                          	DEFINE NEED_scanf
    54                          ELSE
    55                          	IF DEFINED_CRT_scanf_format
    56                          	    ;Only defined as part of sccz80
    57                          	    defc CLIB_OPT_SCANF = CRT_scanf_format
    58                                  ELSE
    59                          	    ; TODO: Some default configurations
    60                                  ENDIF
    61                          ENDIF
    62                          
    63                          
    64                          IF NEED_scanf
    65                          	PUBLIC	__scanf_format_table
    66                          	EXTERN	__scanf_handle_d
    67                          	EXTERN	__scanf_handle_u
    68                          	EXTERN	__scanf_handle_o
    69                          	EXTERN	__scanf_handle_x
    70                          	EXTERN	__scanf_handle_p
    71                          	EXTERN	__scanf_handle_B
    72                          	EXTERN	__scanf_handle_f
    73                          	EXTERN	__scanf_handle_s
    74                          	EXTERN	__scanf_handle_c
    75                          	EXTERN	__scanf_handle_n
    76                          	EXTERN	__scanf_handle_i
    77                          	EXTERN	__scanf_handle_bkt
    78                          	EXTERN	__scanf_noop
    79                          
    80                          __scanf_format_table:
    81                          IF CLIB_OPT_SCANF & $40040
    82                          	defb	'i'
    83                          	defw	__scanf_handle_i
    84                          	defc	temp_CLIB_OPT_SCANF = CLIB_OPT_SCANF
    85                          	UNDEFINE CLIB_OPT_SCANF
    86                          	defc	CLIB_OPT_SCANF = temp_CLIB_OPT_SCANF | 0x3003 | 0x8c08c | 0x10010 | 0x100100
    87                          ENDIF
    88                          
    89                          
    90                          
    91                          IF CLIB_OPT_SCANF & $2002
    92                          	defb	'u'
    93                          	defw	__scanf_handle_u
    94                          ENDIF
    95                          
    96                          IF CLIB_OPT_SCANF & $1001
    97                          	defb	'd'
    98                          	defw	__scanf_handle_d
    99                          ENDIF
   100                          
   101                          IF CLIB_OPT_SCANF & $c00c
   102                          	defb	'x'
   103                          	defw	__scanf_handle_x
   104                          ENDIF
   105                          
   106                          IF CLIB_OPT_SCANF & $80080
   107                          	defb	'p'
   108                          	defw	__scanf_handle_x
   109                          ENDIF
   110                          
   111                          IF CLIB_OPT_SCANF & $10010
   112                          	defb	'o'
   113                          	defw	__scanf_handle_o
   114                          ENDIF
   115                          
   116                          IF CLIB_OPT_SCANF & $100100
   117                          	defb	'B'
   118                          	defw	__scanf_handle_B
   119                          ENDIF
   120                          
   121                          IF CLIB_OPT_SCANF & $20020
   122                          	defb	'n'
   123                          	defw	__scanf_handle_n
   124                          ENDIF
   125                          
   126                          IF CLIB_OPT_SCANF & $200
   127                          	defb	's'
   128                          	defw	__scanf_handle_s
   129                          ENDIF
   130                          
   131                          IF CLIB_OPT_SCANF & $400
   132                          	defb	'c'
   133                          	defw	__scanf_handle_c
   134                          ENDIF
   135                          
   136                          IF CLIB_OPT_SCANF & $4000000
   137                          	defb	'f'
   138                          	defw	__scanf_handle_f
   139                          ENDIF
   140                          
   141                          IF CLIB_OPT_SCANF & $1000000
   142                          	defb	'e'
   143                          	defw	__scanf_handle_f
   144                          ENDIF
   145                          IF CLIB_OPT_SCANF & $10000000
   146                          	defb	'g'
   147                          	defw	__scanf_handle_f
   148                          ENDIF
   149                          IF CLIB_OPT_SCANF & $200000
   150                          	defb	'['
   151                          	defw	__scanf_handle_bkt
   152                          ENDIF
   153                          
   154                          	defb	0	;end marker
   155                          ENDIF
   156                          
   157                          ;
   158                          ; printf format picker
   159                          ;
   160                          
   161                          
   162                          IF DEFINED_CLIB_OPT_PRINTF
   163                          	; User has specified the configuration level - force printf to be included
   164                          	UNDEFINE NEED_printf
   165                          	DEFINE NEED_printf
   166                          ELSE
   167                          	IF DEFINED_CRT_printf_format
   168                          	    ;Only defined as part of sccz80
   169                          	    defc CLIB_OPT_PRINTF = CRT_printf_format
   170                                  ELSE
   171                          	    ; Default configurations to match old behaviour
   172                          	    ; The built in one is roughly the old ministdio
   173                          	    IF DEFINED_complexstdio
   174                                          defc CLIB_OPT_PRINTF = 0x851BF7BF
   175                                      ELSE
   176                          	        defc CLIB_OPT_PRINTF = 0x801BF7BF
   177                                      ENDIF
   178                                  ENDIF
   179                          ENDIF
   180                          
   181                          IF DEFINED_CLIB_OPT_PRINTF_2
   182                          	; User has specified the configuration level - force printf to be included
   183                          	UNDEFINE NEED_printf
   184                          	DEFINE NEED_printf
   185                          ENDIF
   186                          
   187                          IF NEED_printf
   188                          	PUBLIC	__printf_format_table
   189                          	PUBLIC  __printf_format_table64
   190                          	EXTERN	__printf_handle_d
   191                          	EXTERN	__printf_handle_u
   192                          	EXTERN	__printf_handle_o
   193                          	EXTERN	__printf_handle_x
   194                          	EXTERN	__printf_handle_X
   195                          	EXTERN	__printf_handle_p
   196                          	EXTERN	__printf_handle_e
   197                          	EXTERN	__printf_handle_f
   198                          	EXTERN	__printf_handle_s
   199                          	EXTERN	__printf_handle_c
   200                          	EXTERN	__printf_handle_n
   201                          	EXTERN	__printf_handle_B
   202                          	EXTERN	__printf_handle_far_s
   203                          	EXTERN	__printf_handle_ll
   204                          	EXTERN	__printf_handle_lld
   205                          	EXTERN	__printf_handle_llu
   206                          	EXTERN	__printf_handle_llo
   207                          	EXTERN	__printf_handle_llx
   208                          	EXTERN	__printf_handle_llX
   209                          	EXTERN	__printf_handle_llB
   210                          
   211                          __printf_format_table:
   212                          
   213                          IF CLIB_OPT_PRINTF & $2002
   214                          	defb	'u'
   215                          	defw	__printf_handle_u
   216                          ENDIF
   217                          
   218                          IF CLIB_OPT_PRINTF & $1001
   219                          	defb	'd'
   220                          	defw	__printf_handle_d
   221                          ENDIF
   222                          
   223                          IF CLIB_OPT_PRINTF & $4004
   224                          	defb	'x'
   225                          	defw	__printf_handle_x
   226                          ENDIF
   227                          
   228                          IF CLIB_OPT_PRINTF & $8008
   229                          	defb	'X'
   230                          	defw	__printf_handle_X
   231                          ENDIF
   232                          
   233                          IF CLIB_OPT_PRINTF & $80080
   234                          	defb	'p'
   235                          	defw	__printf_handle_x
   236                          ENDIF
   237                          
   238                          IF CLIB_OPT_PRINTF & $100100
   239                          	defb	'B'
   240                          	defw	__printf_handle_B
   241                          ENDIF
   242                          
   243                          IF CLIB_OPT_PRINTF  & $10010
   244                          	defb	'o'
   245                          	defw	__printf_handle_o
   246                          ENDIF
   247                          
   248                          IF CLIB_OPT_PRINTF & $20020
   249                          	defb	'n'
   250                          	defw	__printf_handle_n
   251                          ENDIF
   252                          
   253                          IF CLIB_OPT_PRINTF & $200
   254                          	defb	's'
   255                          	defw	__printf_handle_s
   256                          ENDIF
   257                          
   258                          IF CLIB_OPT_PRINTF & $400
   259                          	defb	'c'
   260                          	defw	__printf_handle_c
   261                          ENDIF
   262                          
   263                          IF CLIB_OPT_PRINTF & $4000000
   264                          	defb	'f'
   265                          	defw	__printf_handle_f
   266                          ENDIF
   267                          
   268                          IF CLIB_OPT_PRINTF  & $1000000
   269                          	defb	'e'
   270                          	defw	__printf_handle_e
   271                          ENDIF
   272                          IF CLIB_OPT_PRINTF & $10000000
   273                          	defb	'g'
   274                          	defw	__printf_handle_f
   275                          ENDIF
   276                          IF (CLIB_OPT_PRINTF & $02000200) = $02000200
   277                          	defb	'S'
   278                          	defw	__printf_handle_far_s
   279                          ENDIF
   280                          IF CLIB_OPT_PRINTF_2
   281                          	defb	'l'
   282                          	defw	__printf_handle_ll
   283                          ENDIF
   284                          	defb	0	;end marker
   285                          
   286                          __printf_format_table64:
   287                          
   288                          IF CLIB_OPT_PRINTF_2 & $02
   289                          	defb	'u'
   290                          	defw	__printf_handle_llu
   291                          ENDIF
   292                          
   293                          IF CLIB_OPT_PRINTF_2 & $01
   294                          	defb	'd'
   295                          	defw	__printf_handle_lld
   296                          ENDIF
   297                          
   298                          IF CLIB_OPT_PRINTF_2 & $04
   299                          	defb	'x'
   300                          	defw	__printf_handle_llx
   301                          ENDIF
   302                          
   303                          IF CLIB_OPT_PRINTF_2 & $08
   304                          	defb	'X'
   305                          	defw	__printf_handle_llX
   306                          ENDIF
   307                          IF CLIB_OPT_PRINTF_2  & $10
   308                          	defb	'o'
   309                          	defw	__printf_handle_llo
   310                          ENDIF
   311                          IF CLIB_OPT_PRINTF_2 & $100
   312                          	defb	'B'
   313                          	defw	__printf_handle_llB
   314                          ENDIF
   315                          	defb	0	;endmarker
   316                          
   317                          
   318                          
   319                          IF CLIB_OPT_PRINTF & $40000000
   320                          	EXTERN	__printf_get_flags_impl
   321                          	PUBLIC	__printf_get_flags
   322                          	defc	__printf_get_flags = __printf_get_flags_impl
   323                          ELSE
   324                          	EXTERN	__printf_get_flags_noop
   325                          	PUBLIC	__printf_get_flags
   326                          	defc	__printf_get_flags = __printf_get_flags_noop
   327                          ENDIF
   328                          
   329                          ENDIF
   330                          
   331                          
   332                          ;--------
   333                          ; Allow a compile time switch between native output and ANSI terminal
   334                          ;
   335                          ; -pragma-need=ansiterminal
   336                          ;--------
   337                          
   338                          IF NEED_ansiterminal
   339                          	PUBLIC		fputc_cons
   340                          	EXTERN		fputc_cons_ansi
   341                          	EXTERN		puts_cons_ansi
   342                          	defc DEFINED_fputc_cons = 1
   343                          	defc DEFINED_puts_cons = 1
   344                          	defc fputc_cons = fputc_cons_ansi
   345                          
   346                          	; Bridge VT100 to gencon
   347                                  IF DEFINED_CLIB_ANSITERMINAL_BRIDGE & CLIB_ANSITERMINAL_BRIDGE != 0
   348                                      PUBLIC ansi_attr
   349                                      PUBLIC ansi_BEL
   350                                      PUBLIC ansi_cls
   351                                      PUBLIC ansi_CHAR
   352                                      PUBLIC ansi_del_line
   353                                      PUBLIC ansi_SCROLLUP
   354                                      EXTERN __gencon_ansi_attr
   355                                      EXTERN __gencon_ansi_BEL
   356                                      EXTERN __gencon_ansi_cls
   357                                      EXTERN __gencon_ansi_CHAR
   358                                      EXTERN __gencon_ansi_del_line
   359                                      EXTERN __gencon_ansi_SCROLLUP
   360                                      defc ansi_attr = __gencon_ansi_attr
   361                                      defc ansi_BEL = __gencon_ansi_BEL
   362                                      defc ansi_cls = __gencon_ansi_cls
   363                                      defc ansi_CHAR = __gencon_ansi_CHAR
   364                                      defc ansi_del_line = __gencon_ansi_del_line
   365                                      defc ansi_SCROLLUP = __gencon_ansi_SCROLLUP
   366                          
   367                                      ; We're using gencon, don't include an ANSIfont
   368                                      UNDEFINE TAR__no_ansifont
   369                                      defc TAR__no_ansifont = 1
   370                          	    IF !DEFINED_ansicolumns
   371                                          defc ansicolumns = CONSOLE_COLUMNS
   372                                          defc DEFINED_ansicolumns = 1
   373                                      ENDIF
   374                                  ENDIF
   375                          
   376                                 	PUBLIC ansicolumns
   377                          
   378                          	IF !TAR__no_ansifont
   379                                  	PUBLIC ansicharacter_pixelwidth
   380                          		PUBLIC ansifont
   381                                  	PUBLIC ansifont_is_packed
   382                                  ELSE
   383                                          defc DEFINED_ansifont = 1
   384                          	ENDIF
   385                          
   386                          	IF !ansipixels
   387                          		defc ansipixels = 256
   388                          	ENDIF
   389                          
   390                          	IF !DEFINED_ansicolumns
   391                          		 defc ansicolumns = 64
   392                          	ENDIF
   393                          
   394                          	UNDEFINE CONSOLE_COLUMNS
   395                          	defc CONSOLE_COLUMNS = ansicolumns
   396                          
   397                          	IF DEFINED_ansirows
   398                          		UNDEFINE CONSOLE_ROWS
   399                          		defc CONSOLE_ROWS = ansirows
   400                          	ENDIF
   401                          
   402                          
   403                          	IF (ansicolumns = (ansipixels/2))
   404                          	    defc ansicharacter_pixelwidth = 2
   405                                      IF !DEFINED_ansifont
   406                                      	EXTERN ansifont_f4pack
   407                          	    	defc ansifont = ansifont_f4pack
   408                                      	defc ansifont_is_packed = 1
   409                                      ENDIF
   410                          	ENDIF
   411                          	IF (ansicolumns = (ansipixels/3))
   412                          	    defc ansicharacter_pixelwidth = 3
   413                                      IF !DEFINED_ansifont
   414                                          EXTERN ansifont_f4pack
   415                          	        defc ansifont = ansifont_f4pack
   416                                          defc ansifont_is_packed = 1
   417                          	    ENDIF
   418                          	ENDIF
   419                          	IF (ansicolumns = (ansipixels/4))
   420                          	    defc ansicharacter_pixelwidth = 4
   421                                      IF !DEFINED_ansifont
   422                                          EXTERN ansifont_f4pack
   423                          	        defc ansifont = ansifont_f4pack
   424                                          defc ansifont_is_packed = 1
   425                          	    ENDIF
   426                          	ENDIF
   427                          	IF (ansicolumns = (ansipixels/5))
   428                          	    defc ansicharacter_pixelwidth = 5
   429                                      IF !DEFINED_ansifont
   430                                          EXTERN ansifont_f5
   431                          	        defc ansifont = ansifont_f5
   432                                          defc ansifont_is_packed = 0
   433                          	    ENDIF
   434                          	ENDIF
   435                          	IF (ansicolumns = (ansipixels/6))
   436                          	    defc ansicharacter_pixelwidth = 6
   437                                      IF !DEFINED_ansifont
   438                                          EXTERN ansifont_f6
   439                          	        defc ansifont = ansifont_f6
   440                                          defc ansifont_is_packed = 0
   441                          	    ENDIF
   442                          	ENDIF
   443                          	IF (ansicolumns = (ansipixels/7))
   444                          	    defc ansicharacter_pixelwidth = 7
   445                                      IF !DEFINED_ansifont
   446                                          EXTERN ansifont_f8
   447                          	        defc ansifont = ansifont_f8
   448                                          defc ansifont_is_packed = 0
   449                          	    ENDIF
   450                          	ENDIF
   451                          	IF (ansicolumns = (ansipixels/8))
   452                          	    defc ansicharacter_pixelwidth = 8
   453                                      IF !DEFINED_ansifont
   454                                          EXTERN ansifont_f8
   455                          	        defc ansifont = ansifont_f8
   456                                          defc ansifont_is_packed = 0
   457                          	    ENDIF
   458                          	ENDIF
   459                          	IF (ansicolumns = (ansipixels/9))
   460                          	    defc ansicharacter_pixelwidth = 9
   461                                      IF !DEFINED_ansifont
   462                                          EXTERN ansifont_f8
   463                          	        defc ansifont = ansifont_f8
   464                                          defc ansifont_is_packed = 0
   465                          	    ENDIF
   466                          	ENDIF
   467                          
   468                          	IF (ansipixels = 512)
   469                          		IF (ansicolumns = 48)
   470                          			defc ansicharacter_pixelwidth = 9
   471                          			IF !DEFINED_ansifont
   472                          				EXTERN ansifont_f8
   473                          				defc ansifont = ansifont_f8
   474                          				defc ansifont_is_packed = 0
   475                          			ENDIF
   476                          		ENDIF
   477                          		IF (ansicolumns = 80)
   478                          			defc ansicharacter_pixelwidth = 6
   479                          			IF !DEFINED_ansifont
   480                          				EXTERN ansifont_f6
   481                          				defc ansifont = ansifont_f6
   482                          				defc ansifont_is_packed = 0
   483                          			ENDIF
   484                          		ENDIF
   485                          		IF (ansicolumns = 160)
   486                          			defc ansicharacter_pixelwidth = 3
   487                          			IF !DEFINED_ansifont
   488                          				EXTERN ansifont_f4pack
   489                          				defc ansifont = ansifont_f4pack
   490                          				defc ansifont_is_packed = 1
   491                          			ENDIF
   492                          		ENDIF
   493                          	ENDIF
   494                          
   495                          	IF (ansipixels = 256)
   496                          		IF (ansicolumns = 24)
   497                          			defc ansicharacter_pixelwidth = 9
   498                          			IF !DEFINED_ansifont
   499                          				EXTERN ansifont_f8
   500                          				defc ansifont = ansifont_f8
   501                          				defc ansifont_is_packed = 0
   502                          			ENDIF
   503                          		ENDIF
   504                          		IF (ansicolumns = 40)
   505                          			defc ansicharacter_pixelwidth = 6
   506                          			IF !DEFINED_ansifont
   507                          				EXTERN ansifont_f6
   508                          				defc ansifont = ansifont_f6
   509                          				defc ansifont_is_packed = 0
   510                          			ENDIF
   511                          		ENDIF
   512                          		IF (ansicolumns = 80)
   513                          			defc ansicharacter_pixelwidth = 3
   514                          			IF !DEFINED_ansifont
   515                          				EXTERN ansifont_f4pack
   516                          				defc ansifont = ansifont_f4pack
   517                          				defc ansifont_is_packed = 1
   518                          			ENDIF
   519                          		ENDIF
   520                          	ENDIF
   521                          
   522                          ENDIF
   523                          
   524                          ; If it's not been overridden by anybody, lets use the native output
   525                          IF !DEFINED_fputc_cons
   526                          	PUBLIC		fputc_cons
   527                          	defc DEFINED_fputc_cons = 1
   528                                  IF !TAR__fputc_cons_generic
   529                          	     EXTERN	fputc_cons_native
   530                            	     defc fputc_cons = fputc_cons_native
   531                                  ELSE
   532                          	     EXTERN	fputc_cons_generic
   533                            	     defc fputc_cons = fputc_cons_generic
   534                                  ENDIF
   535                          ENDIF
   536                          
   537                          IF DEFINED_fputc_cons
   538                          	PUBLIC		_fputc_cons
   539                          	defc		_fputc_cons = fputc_cons
   540                          
   541                          ENDIF
   542                          
   543                          IF !DEFINED_getk
   544                             IF !DEFINED_fgetc_cons
   545                                IF TAR__fgetc_cons_inkey
   546                                    EXTERN fgetc_cons_inkey
   547                                    EXTERN getk_inkey
   548                                    PUBLIC fgetc_cons
   549                                    PUBLIC _fgetc_cons
   550                                    PUBLIC getk
   551                                    PUBLIC _getk
   552                                    defc fgetc_cons = fgetc_cons_inkey
   553                                    defc _fgetc_cons = fgetc_cons_inkey
   554                                    defc getk = getk_inkey
   555                                    defc _getk = getk_inkey
   556                                ENDIF
   557                             ENDIF
   558                          ENDIF
   559                          
   560                          IF DEFINED_fgetc_cons
   561                            IF !DEFINED__fgetc_cons
   562                                PUBLIC _fgetc_cons
   563                                defc _fgetc_cons = fgetc_cons
   564                            ENDIF
   565                          ENDIF
   566                          
   567                          IF DEFINED_getk
   568                            IF !DEFINED__getk
   569                                PUBLIC _getk
   570                                defc _getk = getk
   571                            ENDIF
   572                          ENDIF
   573                          
   574                          
   575                          ;TODO: These need to go into rules
   576                          IF CONSOLE_COLUMNS
   577                          	PUBLIC CONSOLE_COLUMNS
   578                          ENDIF
   579                          IF CONSOLE_ROWS
   580                          	PUBLIC CONSOLE_ROWS
   581                          ENDIF
   582                          
   583                          IF !CONSOLE_XOFFSET
   584                              defc CONSOLE_XOFFSET = 0
   585                          ENDIF
   586                          PUBLIC CONSOLE_XOFFSET
   587                          IF !CONSOLE_YOFFSET
   588                              defc CONSOLE_YOFFSET = 0
   589                          ENDIF
   590                          PUBLIC CONSOLE_YOFFSET
   591                          
   592                          IF !CLIB_KBHIT_NOSTORE
   593                              defc CLIB_KBHIT_NOSTORE = 0
   594                          ENDIF
   595                          PUBLIC CLIB_KBHIT_NOSTORE
   596                          
   597                          
   598                          
C:/etc/z88dk/lib/config/../../lib/target/pc88/classic/monitor.asm:
    64                              INCLUDE "crt/classic/crt_section.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_section.inc:
     1                          ; Memory map and section setup
     2                          ;
     3                          ; Contains the generic variables + features
     4                          
     5                          ;
     6                          ; crt_model = 0    ; everything in RAM
     7                          ; crt_model = 1    ; ROM model, data section copied
     8                          ; crt_model = 2    ; ROM model, data section compressed with zx7
     9                          ; crt_model = 3    ; ROM model, data section compressed with zx0
    10                          
    11                          ; Include the default memory map. You can override this
    12                          
    13                          IF __MMAP == -1
    14                              ; The user has supplied a memory map.
    15                              INCLUDE  "./mmap.inc"
    16                          ELSE
    17                              ; Include the standard memory map
    18                              INCLUDE  "crt/classic/crt_section_standard.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_section_standard.inc:
     1                          ; Classic Memory map and section setup
     2                          ;
     3                          ; This layout suits all the classic machines. Memory placement is
     4                          ; affected by:
     5                          ;
     6                          ; CRT_MODEL: RAM/ROM configuration
     7                          ; CRT_ORG_CODE: Where code starts executing from
     8                          ; CRT_ORG_BSS:  Where uninitialised global variables are placed
     9                          ; CRT_ORG_GRAPHICS: Where graphics routines + variables are stored (certain ports only)
    10                          ; CRT_ORG_FAR: Where far routines + variables are stored (certain ports only)
    11                          
    12                          ;
    13                          ; Contains the generic variables + features
    14                          
    15                          ;
    16                          ; crt_model = 0		; everything in RAM
    17                          ; crt_model = 1		; ROM model, data section copied
    18                          ; crt_model = 2		; ROM model, data section compressed (zx7)
    19                          ; crt_model = 3		; ROM model, data section compressed (zx0)
    20                          
    21                          
    22                          
    23                              INCLUDE "crt/classic/crt_section_code.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_section_code.inc:
     1                          ; CODE sections defined by the classic library
     2                          
     3                              SECTION CODE
     4                              SECTION code_crt_init
     5                              SECTION code_crt_init_exit
     6                              SECTION code_crt_exit
     7                              SECTION code_crt_exit_exit
     8                              SECTION code_driver
     9                              SECTION code_l		;Keep these in "low" memory
    10                              SECTION code_l_sdcc
    11                              SECTION code_l_sccz80
    12                              SECTION code_l_clang
    13                          IF !__crt_org_far
    14                              SECTION code_l_sccz80_far
    15                              SECTION code_far
    16                          ENDIF
    17                              SECTION code_z80
    18                              SECTION rodata_driver       ;Keep it in low memoey
    19                              SECTION code_compiler
    20                              SECTION code_clib
    21                              SECTION code_compress_zx7
    22                              SECTION code_compress_zx0
    23                              SECTION code_compress_zx1
    24                              SECTION code_compress_zx2
    25                              SECTION code_compress_aplib
    26                              SECTION code_ctype
    27                              SECTION code_esxdos
    28                              SECTION code_fp
    29                              SECTION code_fp_math48
    30                              SECTION code_fp_math32
    31                              SECTION code_fp_math16
    32                              SECTION code_fp_mbf32
    33                              SECTION code_fp_mbf64
    34                              SECTION code_fp_am9511
    35                              SECTION code_fp_dai32
    36                              SECTION code_math
    37                              SECTION code_error
    38                              SECTION code_stdlib
    39                              SECTION code_string
    40                              SECTION code_adt_b_array
    41                              SECTION code_adt_b_vector
    42                              SECTION code_adt_ba_priority_queue
    43                              SECTION code_adt_ba_stack
    44                              SECTION code_adt_bv_priority_queue
    45                              SECTION code_adt_bv_stack
    46                              SECTION code_adt_p_forward_list
    47                              SECTION code_adt_p_forward_list_alt
    48                              SECTION code_adt_p_list
    49                              SECTION code_adt_p_queue
    50                              SECTION code_adt_p_stack
    51                              SECTION code_adt_w_array
    52                              SECTION code_adt_w_vector
    53                              SECTION code_adt_wa_priority_queue
    54                              SECTION code_adt_wa_stack
    55                              SECTION code_adt_wv_priority_queue
    56                              SECTION code_adt_wv_stack
    57                              SECTION code_alloc_balloc
    58                              SECTION code_alloc_obstack
    59                              SECTION code_arch
    60                              SECTION code_font
    61                              SECTION code_font_fzx
    62                              SECTION code_psg
    63                              SECTION code_sound_ay
    64                              SECTION code_PSGlib
    65                              SECTION code_time
    66                              SECTION code_sprite_sp1
    67                              SECTION code_temp_sp1
    68                              SECTION code_splib2
    69                              SECTION code_sound_bit
    70                          IF !__crt_org_graphics
    71                              SECTION code_graphics
    72                          ENDIF
    73                              SECTION code_video_vdp
    74                              SECTION code_user
    75                              SECTION CODE_END
    76                          
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_section_standard.inc:
    24                              INCLUDE "crt/classic/crt_section_rodata.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_section_rodata.inc:
     1                          ; RODATA sections defined by the classic library
     2                          
     3                              SECTION RODATA
     4                              SECTION rodata_fp
     5                              SECTION rodata_fp_math48
     6                              SECTION rodata_fp_math32
     7                              SECTION rodata_fp_math16
     8                              SECTION rodata_fp_mbf32
     9                              SECTION rodata_fp_mbf64
    10                              SECTION rodata_fp_am9511
    11                              SECTION rodata_fp_dai32
    12                              SECTION rodata_arch
    13                              SECTION rodata_compiler
    14                              SECTION rodata_clib
    15                              SECTION rodata_psg
    16                              SECTION rodata_sound_ay
    17                          IF !__crt_org_graphics
    18                              SECTION rodata_graphics
    19                          ENDIF
    20                          IF !__crt_org_far
    21                              SECTION rodata_far
    22                          ENDIF
    23                              SECTION rodata_user
    24                              SECTION rodata_font
    25                              SECTION rodata_font_fzx
    26                              SECTION rodata_font_4x8
    27                              SECTION rodata_font_6x8
    28                              SECTION rodata_font_8x8
    29                              SECTION rodata_font_8x10
    30                              SECTION rodata_font_ansi
    31                              SECTION rodata_splib2
    32                              SECTION rodata_sound_bit
    33                              SECTION rodata_video_vdp
    34                              ; Keep the following section last of all
    35                              SECTION rodata_appdor
    36                              SECTION RODATA_END
    37                          
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_section_standard.inc:
    25                              SECTION ROMABLE_END
    26                          IF !__crt_model
    27                              INCLUDE "crt/classic/crt_section_data.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_section_data.inc:
     1                          
     2                          
     3                              SECTION DATA
     4                            IF !__crt_org_graphics
     5                              SECTION smc_clib
     6                            ENDIF
     7                              SECTION smc_fp
     8                              SECTION smc_sound_ay
     9                              SECTION smc_compress
    10                              SECTION smc_video_vdp
    11                              SECTION smc_user
    12                              SECTION data_driver
    13                              SECTION data_clib
    14                              SECTION data_stdlib
    15                              SECTION data_psg
    16                              SECTION data_sound_ay
    17                              SECTION	data_PSGlib
    18                            IF !__crt_org_graphics
    19                              SECTION data_graphics
    20                            ENDIF
    21                          IF !__crt_org_far
    22                              SECTION data_far
    23                          ENDIF
    24                              SECTION data_crt
    25                              SECTION data_fp_mbf32
    26                              SECTION data_arch
    27                              SECTION data_compiler
    28                              SECTION data_splib2
    29                              SECTION data_video_vdp
    30                              SECTION data_user
    31                              SECTION data_alloc_balloc
    32                              SECTION DATA_END
    33                          
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_section_standard.inc:
    28                          ENDIF
    29                              INCLUDE "crt/classic/crt_section_bss.inc"
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_section_bss.inc:
     1                              SECTION BSS
     2                          IF __crt_org_bss
     3                              org     __crt_org_bss
     4                              defb    0   ; control name of bss binary
     5                          ENDIF
     6                              SECTION bss_fp
     7                              SECTION bss_fp_math32
     8                              SECTION bss_fp_math16
     9                              SECTION bss_fp_mbf32
    10                              SECTION bss_fp_mbf64
    11                              SECTION bss_fp_am9511
    12                              SECTION bss_fp_dai32
    13                              SECTION bss_compress_aplib
    14                              SECTION bss_error
    15                              SECTION bss_crt
    16                              SECTION bss_fardata
    17                          IF __crt_org_bss_fardata_start
    18                              org	__crt_org_bss_fardata_start
    19                          ENDIF
    20                          IF !__crt_org_far
    21                              SECTION bss_far
    22                          ENDIF
    23                              SECTION bss_compiler
    24                          IF __crt_org_bss_compiler_start
    25                              org	__crt_org_bss_compiler_start
    26                          ENDIF
    27                              SECTION bss_driver
    28                              SECTION bss_arch
    29                              SECTION bss_clib
    30                              SECTION bss_string
    31                              SECTION bss_alloc_balloc
    32                          IF !__crt_org_graphics
    33                              SECTION bss_graphics
    34                          ENDIF
    35                              SECTION bss_psg
    36                              SECTION bss_sound_ay
    37                              SECTION	bss_PSGlib
    38                              SECTION bss_video_vdp
    39                              SECTION bss_splib2
    40                              SECTION bss_user
    41                          
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_section_standard.inc:
    30                          
    31                          ; For ROM compilation, the data section has to sit in RAM. It's placed
    32                          ; after the BSS section
    33                          IF __crt_model > 0
    34                              SECTION DATA
    35                              org     -1
    36                              defb    0		; control name of data binary
    37                              INCLUDE "crt/classic/crt_section_data.inc"
    38                          ENDIF
    39                              SECTION BSS_END
    40                          
    41                          ; On some targets, the program sits in low memory AND the screen can
    42                          ; only be accessed by paging it into low memory. To mitigate this
    43                          ; routines that access the screen are placed in high memory.
    44                          ;
    45                          ; We might have a similar issue with far code, so create a placeholder
    46                          ; for that as well
    47                          IF __crt_org_graphics > 0 || __crt_org_far > 0
    48                              SECTION	HIMEM
    49                              SECTION code_himem
    50                              SECTION rodata_himem
    51                              SECTION data_himem
    52                              SECTION bss_himem
    53                          IF __crt_org_graphics
    54                              org	__crt_org_graphics
    55                              SECTION smc_clib
    56                              SECTION code_graphics
    57                              SECTION rodata_graphics
    58                              SECTION data_graphics
    59                              SECTION bss_graphics
    60                          ELIF __crt_org_far
    61                              SECTION code_far
    62                              SECTION code_l_sccz80_far
    63                              SECTION data_far
    64                              SECTION rodata_far
    65                              SECTION bss_far
    66                          ENDIF
    67                              SECTION HIMEM_END
    68                          ENDIF
    69                          
C:/etc/z88dk/lib/config/../../lib/crt/classic/crt_section.inc:
    19                          ENDIF
    20                          
    21                          
    22                          ; The classic CRTs need some things setup, so do it
    23                          
    24                              SECTION code_crt_init
    25                          crt0_init:
    26                              EXTERN  __BSS_head
    27                              EXTERN  __BSS_END_tail
    28                          IF CRT_INITIALIZE_BSS = 1
    29  0000  af                    xor     a
    30  0001  210000                ld      hl,__BSS_head
    31  0004  010000                ld      bc,__BSS_END_tail - __BSS_head - 1
    32                            IF !__CPU_INTEL__ && !__CPU_GBZ80__
    33  0007  110000                ld      de,__BSS_head + 1
    34  000a  77                    ld      (hl),a
    35  000b  edb0                  ldir
    36                            ELSE
    37                              inc     b
    38                              inc     c
    39                          init_8080:
    40                              ld      (hl+),a
    41                              dec     c
    42                              jr      NZ,init_8080
    43                              dec     b
    44                              jr      NZ,init_8080
    45                            ENDIF
    46                          ENDIF
    47                          
    48                          IF CRT_ENABLE_STDIO = 1 && CLIB_FOPEN_MAX > 0
    49                              ; Setup std* streams
    50  000d  210000                ld      hl,__sgoioblk+2
    51  0010  3600                  ld      (hl),19 ;stdin
    52  0012  210000                ld      hl,__sgoioblk+12
    53  0015  3600                  ld      (hl),21 ;stdout
    54  0017  210000                ld      hl,__sgoioblk+22
    55  001a  3600                  ld      (hl),21 ;stderr
    56                          ENDIF
    57                          IF ( __crt_model = 1 )
    58                              ; Just copy the DATA section
    59                              EXTERN  __ROMABLE_END_tail
    60                              EXTERN  __DATA_head
    61                              EXTERN  __DATA_END_tail
    62                              ld      hl,__ROMABLE_END_tail
    63                              ld      de,__DATA_head
    64                              ld      bc,__DATA_END_tail - __DATA_head
    65                              EXTERN  asm_memcpy
    66                              call    asm_memcpy
    67                          ELIF ( __crt_model >= 2 )
    68                              EXTERN  __ROMABLE_END_tail
    69                              EXTERN  __DATA_head
    70                              ld      hl,__ROMABLE_END_tail
    71                              ld      de,__DATA_head
    72                            IF ( __crt_model = 2)
    73                              EXTERN  asm_dzx7_standard
    74                              call    asm_dzx7_standard
    75                            ELIF ( __crt_model = 3)
    76                              EXTERN  asm_dzx0_standard
    77                              call    asm_dzx0_standard
    78                            ENDIF
    79                          ENDIF
    80                          
    81                              SECTION code_crt_init_exit
    82  0000  c9                    ret
    83                              SECTION code_crt_exit
    84                          crt0_exit:
    85                              ; Teardown code can go here
    86                              SECTION code_crt_exit_exit
    87  0000  c9                    ret
    88                          
    89                          
    90                              SECTION bss_crt
    91                          IF CRT_ENABLE_STDIO = 1 && CLIB_FOPEN_MAX > 0
    92                              PUBLIC  __sgoioblk
    93                              PUBLIC  __sgoioblk_end
    94                          __sgoioblk:                     ;stdio control block
    95  0000  00ff000000ffff00      defs    CLIB_FOPEN_MAX * 10
              0100c00000000200  
              ff13000c00001500  
              1600001500000000  
              00000000ff007100  
              000000ff00710000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              0000000000000000  
              00000000          
    96                          __sgoioblk_end:                 ;end of stdio control block
    97                          ENDIF
    98                          
    99                          IF !DEFINED_basegraphics
   100                              PUBLIC  base_graphics
   101                          base_graphics:
   102  0064  0000                  defw    0                   ;Address of graphics map
   103                          ENDIF
   104                          
   105                          IF __clib_malloc_heap_size > 0
   106                              PUBLIC  _heap
   107                          _heap:
   108                              defw    0,0                 ;populated by crt_heap_init.inc
   109                          __autoheap:
   110                              defs    __clib_malloc_heap_size
   111                          
   112                          ELIF DEFINED_CRT_HEAP_AMALLOC ||  __crt_stack_size > 0
   113                              PUBLIC  _heap
   114                          _heap:
   115                              defw 0
   116                              defw 0
   117                          ENDIF
   118                          
   119                          IF CLIB_BALLOC_TABLE_SIZE > 0
   120                          
   121                              ; create balloc table
   122                              SECTION data_alloc_balloc
   123                              PUBLIC  __balloc_array
   124                          __balloc_array:
   125                              defw __balloc_table
   126                          
   127                              SECTION bss_alloc_balloc
   128                              PUBLIC  __balloc_table
   129                          __balloc_table:
   130                              defs CLIB_BALLOC_TABLE_SIZE * 2
   131                          
   132                          ENDIF
   133                          
C:/etc/z88dk/lib/config/../../lib/target/pc88/classic/monitor.asm:
    65                          
C:\etc\z88dk\lib\config\..\..\\lib\target\pc88\classic\pc88_crt0.asm:
    35                          ELSE
    36                              defc    __CLIB_PC8800_HAS_BASIC = 0
    37                              INCLUDE "target/pc88/classic/allram.asm"
    38                          ENDIF
    39                          
